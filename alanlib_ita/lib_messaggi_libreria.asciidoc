= Alan StdLib Italian: Messaggi Libreria
Tristano Ajmone <tajmone@gmail.com>
v0.9.6-Alpha, 2018-11-25: Alan 3.0beta6
=============================================================================
Adattamento italiano degli attributi per la messaggistica dei verbi, estratti
dal modulo `lib_definitions.i` della
_ALAN Standard Library_ v2.1, (C) Anssi Räisänen, Artistic License 2.1.
Ad opera di Tristano Ajmone,  (C) 2018, Artistic License 2.1.
=============================================================================

// tag::custom_attributes[]
////
============================================================================
Custom AsciiDoc Attributes for Doxter
============================================================================
////

// Traduzione italiana degli attributi predefiniti di Asciidoctor:
include::attributes-it.adoc[tag=attributes-it]

// Definisci sostituzione di {X} con il carattere Unicode 'heavy check mark'
// (U+2714), usato nelle tabelle dei verbi:
:X: &#x2714;

// end::custom_attributes[]
// tag::messaggi_libreria[]

== Messaggi della Libreria


Questo modulo è il cuore della libreria per quanto concerne il testo
prodotto da essa. Modificando le stringhe degli attributi qui definiti, è
possibile alterare la forma ed i contenuti della maggior parte delle risposte
predefinite dei verbi della libreria.

[WARNING]
========================================
Documentazione in fase di preparazione...
========================================

// end::messaggi_libreria[]
// tag::libmsg_convenzioni[]
=== Convenzioni negli identificativi degli attributi

Nella scelta degli identificativi degli attributi stringa per i messaggi
della libreria sono state adottate le sequenti convenzioni.

[NOTE]
========================================================================
Sebbene irrilevante ai fini della compilazione del codice, l'uso di lettere
maiuscole e minuscole negli identificativi degli attributi di messaggi è
rilevante ai fini delle presenti convenzioni poiché il maiuscolo viene
impiegato in contesti specifici.
========================================================================


Si è cercato di creare identificativi in grado di veicolare il senso del
messaggio che rappresentano in maniera succinta e intuitiva. Per ragioni di
spazio, sono state adottate una serie di abbreviazioni di uso comune:

[horizontal]
`ogg`  :: -> '`oggetto`' del verbo, inteso come _parametro_.
`png`  :: -> '`personaggio non giocante,`' inteso come un'istanza _attore_.
`prep` :: -> '`preposizione,`' in genere intesa come _preposizione articolata_.
`qlco` :: -> '`qualcosa`'.

Alcune abbreviazioni sono indicatrici di alcune caratteristiche tecniche del
messaggio che rappresentano:

* `ogg1` e `ogg2` indicano che la stringa del messaggio fa riferimento ad un
  parametro specifico del verbo tramite il simbolo `$` (`$+1`/`$1` o `$+2`/`$2`,
  rispettivamente). Es. `ogg2_non_posseduto`.

* `png1` e `png2` indicano che il `$` nel messaggio fa rigerimento ad un
   parametro che è un attore. Questo tipo di messaggio è adatto ad essere
   utilizzato solo con attori. Es. `png1_non_apprezzerebbe`.

* `_sg` e `_pl` rappresentano varianti di un medesimo messaggio, il primo
  da utilizzarsi con un referente singolare, il secondo con uno plurale.
  Es. `ogg1_inadatto_sg` e `ogg1_inadatto_pl`.

* `_USA` è impiegato nei messaggi volti a indirizzare il giocatore all'uso
  corretto di un comando. Solitamente associato a verbi creati appositamente
  per intercettare comandi incompleti. Es. `per_scrivere_USA`.

// end::libmsg_convenzioni[]
// tag::libmsg_verbi[]
=== Messaggi dei verbi

// end::libmsg_verbi[]
// tag::20100[]
==== Note sull'uso di `$v`

Nelle stringhe di risposta dei verbi, la libreria originale inglese faceva
abbondante uso del simbolo speciale `$v`, che Alan sostituisce con il verbo
digitato dal giocatore. Per esempio, ipotizzando che il giocatore abbia
digitato "`talk to wall,`" queste stringhe di codice produrrebero:

[horizontal]
`"You can't $v to $+1."`     :: -> You can't talk to the wall.
`"$ving to $+1 is useless."` :: -> Talking to the wall is useless.

Poiché in inglese il verbo imperativo digitato dal giocatore corrisponde
alla forma base del verbo, il simbolo `$v` è utilizzabile in svariati tempi
verbali, e per ottenere il participio presente basta aggiungervi "`ing`"
(`$ving`).

Nella libreria inglese, questo ha reso possibile la creazione di attributi
stringa per risposte riutilizzabili con svariati verbi e in maniera
flessibile. Inoltre, nel caso di verbi con sinonimi o sintassi alternative,
ha consentito di poter includere nella risposta l'esatto verbo digitato dal
giocatore, consentendo una maggior flessibilità nel riutilizzo dei verbi.

[NOTE]
========================================================================
Nell'output, `$v` viene sempre sostituito dal verbo digitato dal giocatore,
a prescindere se esso corrisponda alla definizione del verbo di base, ad una
sintassi alternativa o un sinonimo.
========================================================================

In italiano, purtroppo, l'impiego di `$v` nelle risposte non è altrettanto
flessibile. Nel caso di verbi il cui imperativo termina in '`a`', è possibile
utilizzare `$v` come nella libreria inglese. Per esempio, ipotizzando che il
giocatore abbia digitato "`mangia il maestro`":

[horizontal]
`"Non puoi $vre $+1."`        :: -> Non puoi mangiare il maestro.
`"$+1 non vuol essere $vto."` :: -> Il maestro non vuol essere mangiato.
`"$+1 non è $vbile."`         :: -> Il maestro non è mangiabile.

Ma in italiano sono frequenti i verbi in cui questo non funzionerebbe.
Per esempio, dai seguenti verbi non è possibile derivare l'infinito dalla
forma imperativa del comando usando la formula `$+v`+`re` (`"$vre"`):

[horizontal]
bevi    :: -> bevire.
siediti :: -> sieditire.
dai     :: -> daire.

Questo problema ha determinato un uso limitato di `$v` nella della libreria
italiana, e ad una rielaborazione dell'intero corpo degli attributi stringa
dei messaggi, nonché della loro modalità d'uso all'interno dei verbi,
disconstandosi parecchio dalla libreria originale.

Laddove la libreria originale definiva attributi stringa con risposte
complete, e condivise da più verbi, grazie all'uso di `$v`, nella libreria
italiana si è dovuto creare messaggi parziali in cui è omesso il verbo,
facendo ricadere sul corpo del verbo l'onore di completare la frase.

Ad esempio, la libreria inglese definisce i seguenti attributi per le
risposte in caso di parametri non idonei al verbo:

[source,alan]
  HAS illegal_parameter_sg "That's not something you can $v.".
  HAS illegal_parameter_pl "Those are not something you can $v.".

Ciascun attributo è una risposta completa e non richiede ulteriore testo.
Nella libreria italiana questi attributi sono stati tradotti così:

[source,alan]
  HAS ogg1_inadatto_sg  "$+1 non è qualcosa che puoi".
  HAS ogg1_inadatto_pl  "$+1 non sono qualcosa che puoi".

L'impedimento ad usare `$v` ha costretto a troncare le frasi negli attributi,
e a doverle completare nel codice dei verbi stessi. Ad esempio:

[source,alan]
-----------------------------------------
SYNTAX ispeziona = ispeziona (ogg)
  WHERE ogg IsA THING
    ELSE
      IF ogg IS NOT plurale
        THEN SAY mia_AT:ogg1_inadatto_sg.
        ELSE SAY mia_AT:ogg1_inadatto_pl.
      END IF. "ispezionare."

SYNONYMS perquisisci = ispeziona.
-----------------------------------------

Questo approccio consente di riutilizzare il messaggio con tutti i verbi,
inclusi quelli che non terminano per '`a`'.

Nel caso di messaggi più complessi, nei quali il verbo ricade
necessariamente al centro della frase, è impossibile creare un messaggio
completo tramite un solo attributo stringa. Per esempio, messaggi della
libreria originale come questo:

[source,alan]
  HAS check_obj_not_in_worn2 "It doesn't make sense to $v something you're wearing.".

non possono essere tradotti in italiano se non utilizzando due attributi
distinti (scelta poco pratica). In simili casi la frase della risposta
va rimpiazzata con una più adatta all'uso, oppure si rinuncia ad usare un
attributo stringa e si implementa la risposta usando semplici stringhe nel
 corpo verbo.

Ritornando all'esempio precedente, si noterà che l'infinito del verbo è
rappresentato da una stringa letterale, perciò il verbo mostrato nella
risposta sarà sempre "`ispezionare`", anche quando il giocatore userà il
sinonimo '`perquisisci`'. Questo è per via del fatto che '`perquisisci`'
sarebbe inadatto all'uso di `$vre` (= '`perquisiscire`').

Quando tutte le sintassi ed i sinonimi di un verbo terminano in '`a`' si può
anche ricorrere al'uso `$v` nel codice del verbo. Questo rende le risposte più
fluide, specie nel caso di verbi che coprono sintassi simili ma con
significati diversi (e.s. '`graffia`' e '`gratta`' come traduzione del verbo
inglese '`scratch`'). Il rischio però è che un autore possa aggiungere
ulteriori sinonimi o sintassi per il verbo, e che alcuni di essi possano
condurre a risposte sgrammaticate.

In alcuni casi l'implementazione di sinonimi è finalizzata a catturare
potenziali comandi del giocatore mal formulati; in questi casi l'utilizzo di
un verbo diverso da quello digitato serve anche a sottolineare al giocatore
quale sia il corretto verbo di base associato all'azione.

// end::20100[]
// tag::todo[]
== TODO

Questa sezione contiene l'elenco delle cose da fare per ultimare l'adattamento
italiano del modulo delle classi.

// end::todo[]
// tag::todo_checklist[]
=== Check-list generale

Lista della spesa per le varie cosucce da fare:


=== Check-list per Doxter

Finisci di trasformare commenti in documentazione Doxter:

// end::todo_checklist[]

